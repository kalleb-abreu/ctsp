Description of the Algorithm for the Clustered Traveling Salesman Problem (CTSP)
The proposed algorithm for solving the Clustered Traveling Salesman Problem (CTSP) follows a structured approach in two main phases: Solution Construction and Local Search. The central idea is to divide the problem into clusters, solve the TSP for each cluster separately, and then perform a global search to optimize the order of clusters.

Phase 1: Solution Construction
The first phase aims to generate an initial solution for the problem. For this, we follow these steps:

Cluster Resolution with VNS (Variable Neighborhood Search): For each cluster Ci in C, the TSP is solved individually using the VNS algorithm. This ensures that the initial solution for each cluster is as optimized as possible within its own context.

First Cluster Selection: After resolving all clusters, the first cluster O1 is randomly selected from set C. This is the starting point for forming the global solution.

Cluster Ordering: Once the first cluster is chosen, the remaining clusters are ordered greedily, based on a proximity strategy between clusters. The goal is to create a sequence O that minimizes the total distance traveled between clusters, considering their order.

Phase 2: Local Search
The second phase of the algorithm is responsible for refining the solution obtained in the previous phase, aiming to find a more optimized solution. The local search involves exploring the exchange of order between clusters and is performed iteratively.

Generation of Inversion Masks: The algorithm generates a set of inversion masks that determine which clusters can be inverted during the local search process. The masks are generated only once at the beginning of the local search phase, which reduces the complexity of generating new configurations.

Mask Application and Local Search: At each iteration of the main loop, a mask is applied to the current solution, changing the order of clusters according to the inversion indicated by the mask. Then, a local search using the two-opt algorithm is performed to refine the order of clusters. The two-opt algorithm tries to improve the solution by swapping pairs of clusters and keeping only the swaps that reduce the total cost.

Improvement Verification and Solution Update: If an improvement in the solution is found during the local search, the solution is updated. Additionally, the mask index is reset, and the algorithm resumes the search using the first mask. Otherwise, the mask index is incremented to test the next possibility.

Cluster Shuffle: After each iteration, a shuffle operation is performed on the clusters, which allows the algorithm to explore new configurations and increase solution diversity. The probability of performing the shuffle increases as time t passes, allowing for broader exploration of the solution space.

Stopping Criterion: The main loop continues until the total time t reaches the maximum limit tmax. When this limit is reached, the algorithm ends, and the best solution found is returned.

Complexity and Efficiency
The algorithm was designed to balance efficiency and solution quality. Dividing the problem into smaller subproblems (clusters) allows each cluster to be solved independently and optimized with VNS, while local search and cluster shuffling provide a robust mechanism for exploring the solution space.

Furthermore, the generation of inversion masks and the application of two-opt during local search ensure continuous improvement of the solution without the need to explore all possible cluster permutations. This makes the algorithm quite efficient in terms of execution time, even for large problem instances.
